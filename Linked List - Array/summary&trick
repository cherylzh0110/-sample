1.reverse link:
remember: （经常用到）
ListNode cur = head;
        ListNode pre=null;
        while(cur!=null){
            ListNode temp=cur.next;
            cur.next=pre;
            pre=cur;
            cur=temp;
        }
        
Reverse Linked List I:lc206
Reverse Linked List II:lc92
        
trick:
-(有时候要考虑处理的节点是表头或者表尾的特殊情况）
-(申请ListNode变量时都赋上null)

swap two nodes in linkedlist:  https://www.lintcode.com/problem/swap-two-nodes-in-linked-list/description 


Reverse nodes in k-groups: leetcode 25
Copy List with Random Pointer:  leetcode 138
Linked List Cycle: linkedlist cycle 141 142. for 142, need to remember the trick(先找到快慢指针重合的位置设为cur, head和cur同时走，等
head和cur相遇时，那个位置就是circle开始的位置)
Reorder List: lc143

trick: 画图来考虑连接的问题会让思路变得清晰。

       a way to find the middle ListNode in the List
       ListNode slow = head;
       ListNode fast = head;
       while(fast!=tail&&fast.next!=tail){
         fast = fast.next.next;
         slow = slow.next;
       }
        
        
array:

Arrays.sort(): is quick sort
time:O(nlogn)  space:O(1)
merge sorted array:

median of two sorted array: leetcode 4


subarray 类型:
trick:
子数组 Subarray
令 PrefixSum[i] = A[0] + A[1] + ... A[i - 1], PrefixSum[0] = 0 易知构造 PrefixSum 耗费 O(n) 时间和 O(n) 空间
如需计算子数组从下标i到下标j之间的所有数之和
则有 Sum(i~j) = PrefixSum[j + 1] - PrefixSum[i]

example: 
Number of Subarrays with Bounded Maximum: lc795
Subarray Sum Equals K: leetcode 560
subarray sum closes: linkcode 还未看
Contiguous Array: lc525 经典presum
Maximum Size Subarray Sum Equals k: lc 325  use hashmap to save time complexity. Very good question!

比较trick的array的题目:
Find All Duplicates in an Array: lc442 因为题目中出现2，考虑flip数节省空间复杂度。

则有 Sum(i~j) = PrefixSum[j + 1] - PrefixSum[i]
