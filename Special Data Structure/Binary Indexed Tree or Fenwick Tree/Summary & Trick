the detail is in the link video:
https://www.youtube.com/watch?v=CWDQJGaN1gY


advantage: 
using presum can get the sum range in O(1). But if the value in the input array updates frequently, it will cost O(n) to get 
the answer. 
So the binary indexed tree can help solve the problem in O(logn)

trick: index -= index & (-index); can help find the parent the current treenode. prove is on the video: 
https://www.youtube.com/watch?v=CWDQJGaN1gY      13:41

relative question: 
Range Sum Query - Mutable   lc307



sample:

very detailed realize.   https://github.com/mission-peace/interview/blob/master/src/com/interview/tree/FenwickTree.java


 // Returns sum of arr[0..index]. This function assumes that the array is preprocessed and 
 //partial sums of array elements are stored in BITree[].
    int getSum(int index)                        //算上所有父节点以及自己的值，才是完整的sum
    {
        int sum = 0; // Iniialize result
      
        // index in BITree[] is 1 more than
        // the index in arr[]
        index = index + 1;
      
        // Traverse ancestors of BITree[index]
        while(index>0)
        {
            // Add current element of BITree 
            // to sum
            sum += BITree[index];
      
            // Move index to parent node in 
            // getSum View
            index -= index & (-index);
        }
        return sum;
    }
 
    // Updates a node in Binary Index Tree (BITree) at given index in BITree.  The given value 'val' is added to BITree[i] 
   // and all of its ancestors in tree. 
   public static void updateBIT(int n, int index,           //要将子树的值也进行更新
                                        int val)
    {
        // index in BITree[] is 1 more than 
        // the index in arr[]
        index = index + 1;
      
        // Traverse all ancestors and add 'val'
        while(index <= n)
        {
           // Add 'val' to current node of BIT Tree
           BITree[index] += val;
      
           // Update index to that of parent 
           // in update View                                 
           index += index & (-index);
        }
    }
 
    /* Function to construct fenwick tree 
     from given array.*/
    void constructBITree(int arr[], int n)
    {
        // Initialize BITree[] as 0
        for(int i=1; i<=n; i++)
            BITree[i] = 0;
      
        // Store the actual values in BITree[]
        // using update()
        for(int i = 0; i < n; i++)
            updateBIT(n, i, arr[i]);
    }
