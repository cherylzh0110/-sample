
Trick:
1.用sample code1时可以考虑将输入数组的index做为unionfind里的node。 例如Longest Consecutive Sequence：lc128
2.unionfind可以用O(n)来解决问题
3. we can also add size[] array to store the size of each group!  Ex  Bricks Falling When Hit: lc803

sample code1:

public class UnionFind(){
  private int[] father = null;
  public UnionFind(int n){
    father = new int[n+1];
    for(int i=1;i<n;i++)
      father[i]=i;
  }
  public int find(int x){
    if(father[x]==x)
      return x;
    return father[x]=find(father[x]);   //路径压缩
  }
  
  public int find(int x){  //非路径压缩
    if(father[x]==x)
      return x;
    return find(father[x]);
    }
    
  public void union(int a, int b){
    int root_a=find(a);
    int root_b=find(b);
    if(root_a!=root_b)
      father[root_a]=root_b;
  }
}

public int maximumlength(){  //找到最大的那个集合的大小
            int[] count=new int[father.length];
            int max=0;
            for(int i=0;i<father.length;i++){
                int node=find(i);
                count[node]++;
                max=Math.max(max,count[node]);
            }
            return max;
        }




sample code2 (当node不是整数时，father 数组改为map）
 class UnionFind{
        Map<String,String> father;
        UnionFind(Set<String> parent){   //the initialization will make all nodes father is itself
            father=new HashMap<>();
            for(String n:parent)
                father.put(n,n);
        }
        
        //compress the search path.  cost O(1) to find the root.
        public String find(String node){
            String parent = father.get(node);
            while(!parent.equals(father.get(parent))){  //路径压缩能节省循环的时间，所以到最后就变成O(1)
                parent = father.get(parent);
            }
            String temp = "";
            String fa = node;
            while(!fa.equals(father.get(fa))){
                temp = father.get(fa);
                father.put(fa, parent);
                fa = temp;
            }
            return parent;
        }
        //recursion 版本
        public Point find(Point p){
            if(father.get(p) == p)
                return p;
            father.put(p, find(father.get(p)));
            return father.get(p);
        }
        
        
        public void union(String a, String b){
            String parent1=find(a);
            String parent2=find(b);
            if(!parent1.equals(parent2))
                father.put(parent1,parent2);
        }
    }
    
    

并查集原生操作:
  •查询两个元素是否在同一个集合内 
  •合并两个元素所在的集合
 
并查集的派生操作: 
  •查询某个元素所在集合的元素个数 
  •查询当前集合的个数
  
  
Relative questions:

Numbers of Islands II: lc 305
Redundant Connection: lc684
Accounts Merge: lc721
Longest Consecutive Sequence：lc128
Number of Connected Components in an Undirected Graph: lc323
Sentence Similarity II: lc737
Detect Cycle in an Undirected Graph: https://www.geeksforgeeks.org/union-find/
