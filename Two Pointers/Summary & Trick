1，Two sum quesions and its follow up:

basic two sum: leetcode 1;
For sorted array: use two pointer can save extra space;
For unsorted array: use hashmap will only cost O(n), take O(n) extra space. Two pointer will cost O(n)
3SUM: leetcode 15 (make use of 2SUM, difficult part is remove duplicate)
follow up: 3SUM closest: leetcode 16
Valid Triangle Number: leetcode 611  trick is (for the sorted array, we just need to consider whether a+b>c! that's enough)
Two Sum Closest: 比two sum多出来的地方就是在过程中要记录一下difference。 看this. two sum questions





2，Partition Array:

example: 
this.partition array.java
quick sort: this.quick sort


3, Sort
this.quick sort
this.rainbow sort: combine of quick sort and merge sort!


4.For most substring problem, we are given a string and need to find a substring of it which satisfy some restrictions. A general way is to use a hashmap assisted with two pointers. The template is given below.
there is a template

  for(int right=0;right<s.length();right++){

            if(map[s[end++]]-- ?){  /* modify counter here */ }

            while(/* counter condition */){ 
                 
                 /* update d here if finding minimum*/

                //increase begin to make it invalid/valid again
                
                if(map[s[begin++]]++ ?){ /*modify counter here*/ }
            }  

            /* update d here if finding maximum*/
        }
 
 ex: Minimum Window Substring lc 76
        
