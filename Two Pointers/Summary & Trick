
同向双指针：
1.Two Sum - Difference equals to target  
https://www.lintcode.com/submission/14497657

2.sliding window problem:
Note: -how to move the left and right pointer is very important and applicable to all the sliding window problem.
      -it's common to record the frequency of character in the process of moving pointer.
Minimum Window Substring lc 76   //this question is the pointer in the same direction. It's like a window.
Longest Substring Without Repeating Characters: lc 3
Longest Substring with At Least K Repeating Characters: lc 395   //比较特殊，考前需记忆。
Permutation in String: lc 567
Longest Repeating Character Replacement: lc424
Partition Labels: lc 763
Shortest Subarray with Sum at Least K： lc862 //无法套用template

trick: a template:
int findSubstring(string s){
        vector<int> map(128,0);
        int counter; // check whether the substring is valid
        int begin=0, end=0; //two pointers, one point to tail and one  head
        int d; //the length of substring

        for() { /* initialize the hash map here */ }

        while(end<s.size()){

            if(map[s[end++]]-- ?){  /* modify counter here */ }

            while(/* counter condition */){ 
                 
                 /* update d here if finding minimum*/

                //increase begin to make it invalid/valid again
                
                if(map[s[begin++]]++ ?){ /*modify counter here*/ }
            }  

            /* update d here if finding maximum*/
        }
        return d;
  }

3.特殊：
Increasing Triplet Subsequence: lc334
Longest Mountain in Array: lc845. 有点类似于sliding window, 一个值到位后，变化另一个值。

相向双指针：
1，Two sum quesions and its follow up:   two sum is the two pointers in different directions.
Basic two sum:
two pointer method:   https://www.jiuzhang.com/solutions/two-sum/ cost O(nlogn)
hashmap method: leetcode 1
Note: -For sorted array: use two pointer can save extra space;
      -For unsorted array: use hashmap will only cost O(n), take O(n) extra space. Two pointer will cost O(n)
follow up: Two Sum Closest: 比two sum多出来的地方就是在过程中要记录一下difference。 看this. two sum questions

3SUM: leetcode 15 (make use of 2SUM, difficult part is remove duplicate) sorted array first, so that we can remove duplicate. 
                  As O(n^2) is the time complexity, we do not care sorting time. Try to think about how to remove duplicate 
                  in this case: 1123346
follow up: 3SUM closest: leetcode 16  make use of 2SUM closest.

4SUM: lc18 (make use of 2SUM and 3SUM, should remove duplicate in all functions.)

Sort Transformed Array:lc 360

2.Valid Triangle Number: leetcode 611  trick is (for the sorted array, we just need to consider whether a+b>c! that's enough)


3.Partition Array:
trick:
1.remember some little differences between quick sort, quick select and partition.!!!

example: 
this.partition array.java
quick sort: this.quick sort
quick select: this.quick_select    记！！    https://www.lintcode.com/problem/kth-smallest-numbers-in-unsorted-array/my-submissions
Kth Largest Element in an Array: lc215. using quick select.   
Wiggle Sort II: lc324 combine quick select and sort color.
Sort color: lc 75 经典！

4.
this.quick sort
this.rainbow sort: combine of quick sort and merge sort!


 
        
