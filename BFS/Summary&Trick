BFS in Binary Tree:
classical example (level order):

 public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> que=new LinkedList<TreeNode>();
        List<List<Integer>> res=new ArrayList<List<Integer>>();
        if(root==null)
            return res;
        que.offer(root);
        while(!que.isEmpty()){
            int size=que.size();
            List<Integer> level=new ArrayList<Integer>();
            for(int i=0;i<size;i++){        //只有在层级遍历时需要这层循环
                TreeNode head=que.poll();
                level.add(head.val);
                if(head.left!=null)
                    que.offer(head.left);
                if(head.right!=null)
                    que.offer(head.right);
            }
            res.add(level);   
        }
        return res;
    }

the time and space complexity are both O(n)

BFS 序列化的问题:

Serialize and Deserialize BST: lc 449 (remember this question! use combination of DFS and BFS);
Serialize and Deserialize binary tree: a little difficul, need to review. lc 297 (leetcode also use preorder for serialize and queue (divide conquer) for deserialize.
                                         my solution use bfs. (remember this one)
ex:
Binary Tree Level Order Traversal II: leetcode 107
Binary Tree Zigzag Order Traversal: leetcode 103
Convert Binary Tree to Linked Lists by Depth:  https://www.lintcode.com/problem/convert-binary-tree-to-linked-lists-by-depth/description

BFS in graph:
construct the graph, 邻接表
ex: Graph Valid Tree: this
Surrounded Regions: lc 130
Word Ladder I II: lc126 127.

Topological sorting: refer to this.topolocal sorting.java
idea is to find whether there is circle in the directed graph. The condition to be in queue is the node whose indegree is 0;
ex:Course schedule: lc207





